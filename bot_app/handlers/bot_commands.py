import asyncpg.pool

from aiogram import (
    Bot,
    Router,
    types
)
from aiogram import filters
from aiogram.fsm.context import FSMContext

from bot_app.exceptions.database import (
    DatabaseGetCategoriesError,
    DatabaseGetGroupError
)
from bot_app.filters.check_chat_type import ChatTypeFilter
from bot_app.keyboards.keyboards import (
    create_categories_keyboard,
    create_link_chanel_button
)
from bot_app.lexicon.lexicon_common.lexicon_ru import LEXICON_RU
from bot_app.utils.admin_check import check_is_admin

from config.database import (
    get_groups_from_db,
    get_categories_from_db
)
from config.log import logger


# –°–æ–∑–¥–∞—ë–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –¥–ª—è –±–æ—Ç–∞
bot_commands_router = Router(name='bot_commands_router')


@bot_commands_router.message(ChatTypeFilter('private'),
                             filters.Command('cancel'))
async def cancel_handler(message: types.Message,
                         state: FSMContext):

    """
    –•–µ–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /cancel.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /cancel.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è FSM.
    :return: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è
        await message.answer(text=LEXICON_RU['cancel'])
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        await state.clear()
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ True –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫–Ω–æ–ø–æ–∫
        await state.update_data(cancel_handler=True)
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /cancel: {e}')
        await message.answer(LEXICON_RU['error'])


@bot_commands_router.message(ChatTypeFilter('private'),
                             filters.Command('start'))
async def start_command(message: types.Message,
                        bot: Bot,
                        pool: asyncpg.pool.Pool):

    """
    –•–µ–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /start.
    :param bot:–û–±—ä–µ–∫—Ç Bot.
    :param pool: –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î.
    :return: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ –ë–î
        groups_id = await get_groups_from_db(pool=pool)
        logger.info(f'–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏–∑ –ë–î.')

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
        categories = await get_categories_from_db(pool=pool)
        logger.info(f'–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î.')

        category_name = ''
        for name in categories:
            category_name += f'{name.get("name")}\n'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –æ–¥–Ω–æ–π –∏–∑ –≥—Ä—É–ø–ø
        is_admin = await check_is_admin(
            bot=bot,
            user_id=user_id,
            groups_id=groups_id
        )

        text = f'{LEXICON_RU["/start"]}\n\n'

        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω
        if is_admin:
            text += f'{LEXICON_RU["info_for_admins"]}\n' \
                    f'{category_name}'

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start
        parameter = message.text.split(maxsplit=1)[1] if len(message.text.split()) > 1 else None
        if parameter == 'welcome_to_private':
            await message.answer(text=text)
        else:
            await message.answer(text=text)

    except DatabaseGetGroupError as e:
        logger.error(e)
    except DatabaseGetCategoriesError as e:
        logger.error(e)
    except KeyError as e:
        logger.error(f'–ö–ª—é—á {e} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ LEXICON_RU')
        await message.answer(LEXICON_RU['error_key'])
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /start: {e}')
        await message.answer(LEXICON_RU['error'])


@bot_commands_router.message(ChatTypeFilter('private'),
                             filters.Command('assembl'))
async def assembles_command(message: types.Message,
                            state: FSMContext,
                            pool: asyncpg.pool.Pool):

    """
    –•–µ–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /—Å–±–æ—Ä–∫–∏.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π —Å–±–æ—Ä–∫–∏.
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è FSM.
    :param pool: –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î.
    :return: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ False –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫
        await state.update_data(cancel_handler=False)
        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
        categories = await get_categories_from_db(pool=pool)

        keyboard = create_categories_keyboard(categories=categories)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        await message.answer(
            text=LEXICON_RU['assembl'],
            reply_markup=keyboard
            )
    except DatabaseGetCategoriesError as e:
        logger.error(e)
        await message.answer(LEXICON_RU['error'])
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /assembl: {e}')
        await message.answer(LEXICON_RU['error'])


@bot_commands_router.message(ChatTypeFilter('private'),
                             filters.Command('help'))
async def help_command(message: types.Message,
                       bot: Bot,
                       pool: asyncpg.pool.Pool
                       ):

    """
    –•–µ–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π —Å–±–æ—Ä–∫–∏.
    :param bot: –û–±—ä–µ–∫—Ç Bot.
    :param pool: –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î.
    :return: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """

    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = message.from_user.id

        # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ –ë–î
        groups_id = await get_groups_from_db(pool=pool)
        logger.info(f'–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≥—Ä—É–ø–ø –∏–∑ –ë–î.')

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
        categories = await get_categories_from_db(pool=pool)
        logger.info(f'–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –ë–î.')

        category_name = ''
        for name in categories:
            category_name += f'üîπ {name.get("name")} - {name.get("description")}\n'

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –æ–¥–Ω–æ–π –∏–∑ –≥—Ä—É–ø–ø
        is_admin = await check_is_admin(
            bot=bot,
            user_id=user_id,
            groups_id=groups_id
        )

        text = f'{LEXICON_RU["/help"]}\n\n'

        # –ï—Å–ª–∏ –∞–¥–º–∏–Ω
        if is_admin:
            text += f'{LEXICON_RU["info_for_admins"]}\n' \
                    f'{category_name}'

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é
        await message.answer(text=text)

    except DatabaseGetGroupError as e:
        logger.error(e)
        await message.answer(LEXICON_RU['error'])
    except DatabaseGetCategoriesError as e:
        logger.error(e)
        await message.answer(LEXICON_RU['error'])
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /help: {e}')
        await message.answer(LEXICON_RU['error'])


@bot_commands_router.message(ChatTypeFilter('private'),
                             filters.Command('commandos'))
async def cancel_handler(message: types.Message):

    """
    –•–µ–Ω–¥–ª–µ—Ä, —Å—Ä–∞–±–∞—Ç—ã–≤–∞—é—â–∏–π –Ω–∞ –∫–æ–º–∞–Ω–¥—É /COMMANDOS.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /COMMANDOS.
    :return: –§—É–Ω–∫—Ü–∏—è –Ω–∏—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç.
    """

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –¥–µ–π—Å—Ç–≤–∏—è
        await message.answer(
            text=LEXICON_RU['text_for_url_for_chanel'],
            reply_markup=create_link_chanel_button()
        )
    except Exception as e:
        logger.error(f'–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã /COMMANDOS: {e}')
        await message.answer(LEXICON_RU['error'])
